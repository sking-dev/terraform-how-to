# Basic end-to-end preliminary test.
# Generate a single ACME certificate from Let's Encrypt staging environment.
# DNS integration with test public DNS zone in Azure.
# Resulting certificate to be stored in "npr" and "liv" key vaults (with Common Name to match each environment)

# Source: https://blog.xmi.fr/posts/tls-terraform-azure-lets-encrypt/ .
# Cross-referenced a bit with https://itnext.io/lets-encrypt-certs-with-terraform-f870def3ce6d .

# See provider.tf for "acme" provider.
# NOTE: The provider resource block includes the URL for the ACME server.

# See data.tf for data source block for existing public DNS zone.

# Create private key in PEM format.
resource "tls_private_key" "private_key" {
  algorithm = "RSA"
}

# Create account on ACME server using private key plus email address.
resource "acme_registration" "acme_poc_test" {
  account_key_pem = tls_private_key.private_key.private_key_pem
  email_address   = var.acme_registration_email
}

# Create password for certificate's PFX file.
resource "random_password" "acme_poc_test" {
  length  = 24
  special = true
}

# Get a certificate from ACME server.
resource "acme_certificate" "acme_poc_test" {
  account_key_pem          = acme_registration.acme_poc_test.account_key_pem
  common_name              = local.certificate_common_name
  certificate_p12_password = random_password.acme_poc_test.result

  dns_challenge {
    # This is where the public DNS zone is hosted.
    provider = "azure"

    config = {
      # Some arguments are passed here but it's not enough to let the provider access the zone in Azure DNS.
      # Other arguments (tenant id, subscription id, and cient id/secret) must be set through environment variables.
      AZURE_RESOURCE_GROUP = data.azurerm_dns_zone.acme_poc_challenge.resource_group_name
      AZURE_ZONE_NAME      = data.azurerm_dns_zone.acme_poc_challenge.name
      AZURE_TTL            = 300
    }
  }
}

# Extend the blog post example by copying the ACME-generated certificate to Azure Key Vault.
resource "azurerm_key_vault_certificate" "acme_poc_test" {
  # TODO: Move to variable.
  # NOTE: The name of the certificate will probably need to match the common name (site name)
  name         = "acme-poc-test-certificate"
  key_vault_id = azurerm_key_vault.acme_poc.id

  certificate {
    contents = acme_certificate.acme_poc_test.certificate_p12
    password = acme_certificate.acme_poc_test.certificate_p12_password
  }
}

# TODO: Establish if secret is required in AGW context.
resource "azurerm_key_vault_secret" "acme_poc_test" {
  # TODO: Move to variable.
  # NOTE: The name of the certificate will probably need to match the common name (site name)
  name         = "acme-poc-test-secret"
  value        = acme_certificate.acme_poc_test.certificate_p12_password
  key_vault_id = azurerm_key_vault.acme_poc.id
}
