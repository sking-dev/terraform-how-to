---
parameters:  
- name: terraformVersion
  type: string
  default: ''

- name: terraformExecutionDir
  type: string
  default: ''

- name: workingDir
  type: string
  default: ''

steps:
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: 'Install Terraform ${{ parameters.terraformVersion }}'
  inputs:
    terraformVersion: ${{ parameters.terraformVersion }}

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
  displayName: 'Run terraform init'
  inputs:
    command: init
    # Initialize working directory for validation *without* accessing any configured backend.
    commandOptions: '-backend=false'
    workingDirectory: ${{ parameters.workingDir }}
    allowTelemetryCollection: false
    
# Style convention check using 'terraform fmt'.
- script: 'terraform fmt -check -diff -recursive -write=false'
  workingDirectory: ${{ parameters.workingDir }}
  displayName: 'Run terraform fmt'

# Syntax and internal consistency check using 'terraform validate'.
- script: |
    terraform validate
  workingDirectory: ${{ parameters.workingDir }}
  displayName: 'Run terraform validate'

# Linting check using *TFLint* static analysis tool for Terraform code.
- script: |
    echo '[sking-dev] Start TFLint run.'
    echo '[sking-dev] Check working directory.'
    pwd
    echo '[sking-dev] Run Docker image.'
    # Command to run Docker image with TFLint *and* ruleset plugins.
    # Use '--force' argument to suppress error code on initial scan(s) of legacy code.
    docker run --rm -v $(pwd):/data -t ghcr.io/terraform-linters/tflint-bundle --enable-plugin="azurerm" --force --module
  workingDirectory: ${{ parameters.workingDir }}
  displayName: 'Run TFLint'

# Security check using Trivy security scanner from Docker image.
# Run twice: once to detect non-critical then again to detect critical.
- script: |
    echo '[sking-dev] Start Trivy security scan.'
    echo '[sking-dev] Check working directory.'
    pwd
    echo '[sking-dev] Run Trivy Docker image to scan for non-critical issues.'
    docker run --rm \
    --volume $HOME/Library/Caches:/root/.cache/ \
    --volume "$(pwd):/src" \
    aquasec/trivy config \
    --exit-code 0 \
    --severity LOW,MEDIUM,HIGH \
    --ignorefile /src/.trivyignore \
    --format template --template "@contrib/junit.tpl" \
    --output src/junit-report-non-critical.xml \
    /src
    echo '[sking-dev] Run Trivy Docker image to scan for critical issues.'
    echo '[sking-dev] Detection of critical vulnerability will fail validation build.'
    docker run --rm \
    --volume $HOME/Library/Caches:/root/.cache/ \
    --volume "$(pwd):/src" \
    aquasec/trivy config \
    --exit-code 1 \
    --severity CRITICAL \
    --ignorefile /src/.trivyignore \
    --format template --template "@contrib/junit.tpl" \
    --output src/junit-report-critical.xml \
    /src
  workingDirectory: ${{ parameters.workingDir }}
  displayName: 'Run Trivy'
  enabled: true

# Publish Trivy scan results to "Tests" tab in Azure Pipelines run UI.
- task: PublishTestResults@2
  inputs:
    testRunTitle: 'Trivy Scan Results'
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/junit-report-*.xml'
    searchFolder: ${{ parameters.workingDir }}
    # TODO: Fail build if any test failures detected.
    #     : But only when non-critical and critical results have been split out.
    failTaskOnFailedTests: false
    mergeTestResults: true
  displayName: 'Publish Trivy results'
  condition: always()
  enabled: true
